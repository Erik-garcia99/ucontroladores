puertos y uarts 

PINB |+ 1<< PB7;



---------------------------------------------------------------------------------------------
PWM (modulación por ancho de pulsos)


fast pwm: el registro de counter me controla el ancho.
llega al tope y se va cero , se usa mas para algo mas incandecente. 

phase correct PWM: 
llega al tope y decrementea, se usa mas para motores, cambios mas suaves. 


-------------------------------------------
-ejemplo: fast pwm 

//fast pwm en PB7 (OC0A)
//calcular el prescalador, el timpo 

//FPWM ~= 10ms <- hacercarnos 
// 16MHz / (256 tikcs * 256 PS ) = 
//  

void Timer0_PWM(void){


	TCCR0B=0; //Disibale Timer0
	TCCR0A= (2 << COM0A0 ) | (3 << WGM00); //fast PWM, LOS 4 mas singificativos se encargan de la salida del PWM
	TCCR0B= 4 << CS00;// PS= 256
	//50% de intensidad
	OCR0A =128; 

	


}


int main(void){


	TCCR0B=0; //Disibale Timer0
	TCCR0A= (2 << COM0A0 ) | (3 << WGM00); //fast PWM, LOS 4 mas singificativos se encargan de la salida del PWM
	TCCR0B= 4 << CS00;// PS= 256
	//50% de intensidad
	OCR0A =0; 
	uint8_t direccion= 1;

	while(1){

		if(OCR0A == 255){
			direccion=-1;
		}
		else if(OCR0A == 0){

			direccion=1;
		}

		OCR0A += direccion;
	}

}


-----------------------------------------------------------------------------------------------------

taller 24 de octubre 2024 


const uint8_t period=10;

void delay(uint8_t ms){


	while(ms--){
		//volatile para que no me optimice la variable. 
		//volatile uint16_t count = 5300; // 16000/ 3 = 5300 esto porque se están quemando 3 tick entre decrementar y branch
		volatile uint16_t count = 888; //al parecer hay mas ciclos internos en ASM 
		while(count--)
			;

	
	}
	


}



int main(void){


	uint16_t with = 50; //%

	DDRB |= 1 << PB7; //<-CONTIENE LA DIRECCION DEL PIN 


	while(1){

		uint8_t withHigh = (period*with)/100; 
		PORTB |= 1<< PB7; //<- portb manda la señal de salida al pin 7 del puerto b

		delay(withHigh);
		PORTB &= ~(1<<PB7); //apaga el led
		delay(period- withHigh);

	} 

}


		TIMER - FAST PWM 



//FPWM ~=10ms 
//el I/O dicta que timer se puede usar, los que tiene una salida física. 



void main(void){


	TCCR0B= 0 ; //deshabilitar TIMER0
	
	//habioitar el pin de salida 

	DDRB |= 1<< PB7;

	TCCR0A = (2 << COM0A0) |  (3 << WGM00); //NO INVERTIDOG
	
	TCCR0B = 4 << CS00; //PS = 256 , T ~= 4ms
	
	OCR0A = 25; //10%,simular el 10% -> 100%=255 

	while(1){

		
	}
	

 
}

-------------------------------------------------


		animacion de pulsar 

void delay(uint8_t ms){


	while(ms--){
		
		volatile uint16_t count = 5300; 
		while(count--)
			;

	
	}
	


}






void main(void){


	uint8_t direccion=1;
	
	//habioitar el pin de salida 

	DDRB |= 1<< PB7;

	TCCR0A = (2 << COM0A0) |  (3 << WGM00); //NO INVERTIDOG
	
	TCCR0B = 4 << CS00; //PS = 256 , T ~= 4ms
	
	OCR0A = 0; 

	while(1){
		
		if(OCR0A==254){
		
			direccion=-1;
		}
		else if(OCR0A ==1 ){
			dirección =1;
		}
		OCR0A += direccion;
		delay(1);
		
		
	}
	

 
}

















